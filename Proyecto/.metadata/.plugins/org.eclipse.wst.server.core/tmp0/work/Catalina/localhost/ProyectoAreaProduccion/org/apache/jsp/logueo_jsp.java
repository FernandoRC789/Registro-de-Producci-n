/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-01 00:35:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.sql.*;

public final class logueo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"ISO-8859-1\">\r\n");
      out.write("    <title>Login</title>\r\n");
      out.write("    <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");

        // Verificar que el formulario se haya enviado con POST
        if ("POST".equalsIgnoreCase(request.getMethod())) {
            String usuario = request.getParameter("usuario");
            String contraseña = request.getParameter("contraseña");

            // Solo hacer la verificación si los parámetros de usuario y contraseña están presentes
            if (usuario != null && contraseña != null) {
                // Establecer la conexión con la base de datos
                Connection con = null;
                PreparedStatement statement = null;
                ResultSet resultSet = null;

                try {
                    // Cargar el driver JDBC
                    Class.forName("com.mysql.cj.jdbc.Driver");

                    // Conectar a la base de datos (ajusta la URL, usuario y contraseña)
                    String url = "jdbc:mysql://localhost:3306/BDT1_RODRIGUEZ?useSSL=false&serverTimezone=UTC";
                    String dbUsuario = "root"; 
                    String dbContraseña = "mysql";  

                    con = DriverManager.getConnection(url, dbUsuario, dbContraseña);

                    // Preparar la consulta SQL para verificar las credenciales
                    String sql = "SELECT * FROM USUARIOS WHERE NOM_USUARIO = ? AND CONTRASENA = ?";
                    statement = con.prepareStatement(sql);
                    statement.setString(1, usuario);
                    statement.setString(2, contraseña);
                    resultSet = statement.executeQuery();

                    // Verificar si el usuario y la contraseña son correctos
                    if (resultSet.next()) {
                        // Si las credenciales son correctas, redirigir a otra página
                        response.sendRedirect("registroDeOrden.jsp");
                        return; // Asegúrate de que el código después de la redirección no se ejecute
                    } else {
                        // Si las credenciales son incorrectas, mostrar mensaje de error
                        out.println("<h3>Usuario o contraseña incorrectos.</h3>");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    out.println("<h3>Error al conectar con la base de datos: " + e.getMessage() + "</h3>");
                } finally {
                    try {
                        if (resultSet != null) resultSet.close();
                        if (statement != null) statement.close();
                        if (con != null) con.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                        out.println("<h3>Error al cerrar recursos: " + e.getMessage() + "</h3>");
                    }
                }
            } else {
                out.println("<h3>Usuario o contraseña vacíos.</h3>");
            }
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"Registro-sesion\">\r\n");
      out.write("		<img src=\"img/farmexlogo.png\" alt=\"logo de farmex\">\r\n");
      out.write("		\r\n");
      out.write("		<form method=\"post\" class=\"formulario\">\r\n");
      out.write("			<div>\r\n");
      out.write("                <label for=\"turno\">TURNO:</label>\r\n");
      out.write("				<select name=\"lenguajes\" id=\"lang\">\r\n");
      out.write("			        <option value=\"primero\">PRIMERO</option>\r\n");
      out.write("			        <option value=\"segundo\">SEGUNDO</option>\r\n");
      out.write("			        <option value=\"tercero\">TERCERO</option>\r\n");
      out.write("			    </select>            \r\n");
      out.write("			</div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <label for=\"usuario\">USUARIO:</label>\r\n");
      out.write("                <input type=\"text\" id=\"usuario\" name=\"usuario\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <label for=\"contraseña\">CONTRASEÑA:</label>\r\n");
      out.write("                <input type=\"password\" id=\"contraseña\" name=\"contraseña\">\r\n");
      out.write("            </div>\r\n");
      out.write("			\r\n");
      out.write("			<button id=\"btnAceptar\">ACEPTAR</button>\r\n");
      out.write("			<button id=\"btnCerrar\">CERRAR</button>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
